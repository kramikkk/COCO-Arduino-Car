#include <SoftwareSerial.h>
#include <NewPing.h>
#include <Servo.h>

// Bluetooth Serial Setup
SoftwareSerial BTSerial(9, 4); // RX, TX

// Motor Control Pins
#define ENABLE_MOTOR_A 5   // Enable pin for Motor A (L298 enA)
#define MOTOR_A_IN1 3      // Input 1 for Motor A (L298 in1)
#define MOTOR_A_IN2 7      // Input 2 for Motor A (L298 in2)
#define MOTOR_B_IN1 8      // Input 1 for Motor B (L298 in3)
#define MOTOR_B_IN2 11     // Input 2 for Motor B (L298 in4)
#define ENABLE_MOTOR_B 6   // Enable pin for Motor B (L298 enB)

// Servo Control Pin
#define SERVO_PIN A2

// Buzzer pin
#define BUZZER_PIN 10

// Flame sensor pin
#define FLAME_SENSOR_PIN A0

// PIR sensor input pin
#define PIR_SENSOR_PIN 2 

// IR Sensor Pins
#define IR_SENSOR_RIGHT A3 // Right IR sensor
#define IR_SENSOR_LEFT A1  // Left IR sensor

// Ultrasonic Sensor Pins
#define ULTRASONIC_ECHO_PIN 13 // Echo pin
#define ULTRASONIC_TRIGGER_PIN 12 // Trigger pin
#define ULTRASONIC_MAX_DISTANCE 100 // Maximum distance to check obstacles in cm

NewPing sonar(ULTRASONIC_TRIGGER_PIN, ULTRASONIC_ECHO_PIN, ULTRASONIC_MAX_DISTANCE); // Initialize ultrasonic sensor

// Servo motor
Servo servo;  // Servo motor for obstacle detection

// Global Variables
int distanceLeft, distanceRight;

int receivedData; // Variable to store data received from Bluetooth
int motorSpeed = 217;  
int operationMode = 0;

void setup() {
    // Initialize Pins
    pinMode(IR_SENSOR_RIGHT, INPUT); 
    pinMode(IR_SENSOR_LEFT, INPUT); 
    pinMode(ULTRASONIC_ECHO_PIN, INPUT);  
    pinMode(ULTRASONIC_TRIGGER_PIN, OUTPUT); 
    pinMode(ENABLE_MOTOR_A, OUTPUT); 
    pinMode(MOTOR_A_IN1, OUTPUT); 
    pinMode(MOTOR_A_IN2, OUTPUT); 
    pinMode(MOTOR_B_IN1, OUTPUT); 
    pinMode(MOTOR_B_IN2, OUTPUT); 
    pinMode(ENABLE_MOTOR_B, OUTPUT); 
    pinMode(SERVO_PIN, OUTPUT);
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(PIR_SENSOR_PIN, INPUT);
    
    // Start Serial Communication
    Serial.begin(9600);
    BTSerial.begin(9600);
    
    delay(500);
}

void loop() {  
    // Read Bluetooth Data
    if (BTSerial.available() > 0) {     
        receivedData = BTSerial.read(); 
        Serial.println(receivedData);     
        if (receivedData > 20) {
            motorSpeed = receivedData;
        }      
    }

    // Control Modes based on Bluetooth Data
    if (receivedData == 8) { 
        operationMode = 0;
        motorSpeed = 217; 
        stopMotors(); 
    } else if (receivedData == 9) { 
        operationMode = 1; 
        motorSpeed = 190; 
    } else if (receivedData == 10) { 
        operationMode = 2; 
        motorSpeed = 255; 
    } else if (receivedData == 11) { // New Security Mode
      operationMode = 3;
      stopMotors(); 
    }
    // Set Motor Speeds
    analogWrite(ENABLE_MOTOR_A, motorSpeed);
    analogWrite(ENABLE_MOTOR_B, motorSpeed);

    // Operation Mode Logic
    if (operationMode == 0) {     
        manualControl();
    } else if (operationMode == 1) {    
        lineFollowerControl();
    } else if (operationMode == 2) {    
        obstacleAvoidanceControl();
    } else if (operationMode == 3) {   // Security Mode
        securityModeControl();
    }

    delay(10);
}

// Function Definitions

void manualControl() {
    if (receivedData == 1) { moveForward(); }
    else if (receivedData == 2) { moveBackward(); }
    else if (receivedData == 3) { moveLeft(); }
    else if (receivedData == 4) { moveRight(); }
    else if (receivedData == 5) { stopMotors(); }
    else if (receivedData == 6) { playHorn(); }
    else if (receivedData == 7) { stopHorn(); }
}

void lineFollowerControl() {
    if ((digitalRead(IR_SENSOR_RIGHT) == LOW) && (digitalRead(IR_SENSOR_LEFT) == LOW)) {
        Serial.println("Moving forward");
        moveForward();
    } else if ((digitalRead(IR_SENSOR_RIGHT) == HIGH) && (digitalRead(IR_SENSOR_LEFT) == LOW)) {
        moveRight();
        Serial.println("Turning left");
    } else if ((digitalRead(IR_SENSOR_RIGHT) == LOW) && (digitalRead(IR_SENSOR_LEFT) == HIGH)) {
        moveLeft();
        Serial.println("Turning right");
    } else if ((digitalRead(IR_SENSOR_RIGHT) == HIGH) && (digitalRead(IR_SENSOR_LEFT) == HIGH)) {
        stopMotors();
        Serial.println("Line lost! Stopping.");
    }
}

// New Security Mode Function
void securityModeControl() {
    int motionDetected = digitalRead(PIR_SENSOR_PIN);  // Read PIR sensor

    if (motionDetected == HIGH) {  // Motion detected
        Serial.println("Motion Detected! Triggering Alarm.");
        playAlarm();
    } else {
        Serial.println("No motion detected.");
    }
}

void obstacleAvoidanceControl() {
    int distance = getDistance();
    int flameDetected = digitalRead(FLAME_SENSOR_PIN); // Read flame sensor

    Serial.print("Measured Distance: ");
    Serial.println(distance);
    Serial.print("Flame Sensor Reading: ");
    Serial.println(flameDetected);

    if (flameDetected == LOW) {
        // Flame detected, stop motors and sound the alarm
        Serial.println(F("Flame detected! Stopping motors and sounding the alarm."));
        moveBackward();
        delay(1000);
        stopMotors();
        playAlarm();
    } else {
        if (distance <= 20) { 
            Serial.println(F("Object too close! Backing up."));
            stopMotors();
            moveBackward();
            delay(800); 
            stopMotors();
            decideTurnDirection();
        } else if (distance <= 30) { 
            Serial.println(F("Obstacle detected! Deciding direction to avoid."));
            stopMotors();
            decideTurnDirection();
        } else {
            Serial.println(F("No obstacle detected. Moving forward."));
            moveForward();
        }
    }
}

int getDistance() {
    delay(50);
    int cm = sonar.ping_cm();
    return (cm == 0) ? 100 : cm; // Default to max distance if no echo
}

void decideTurnDirection() {
    lookLeft();
    lookRight();

    if (distanceRight <= distanceLeft) {
        Serial.println(F("Turning Left"));
        turnLeft();
    } else {
        Serial.println(F("Turning Right"));
        turnRight();
    }

    delay(500);    // Allow some movement to clear the obstacle
}

// Function to look left and measure distance
void lookLeft() {
    servo.attach(A2);  
    servo.write(180); 
    delay(500);
    distanceLeft = getDistance(); 
    centerServo(); 
}

// Function to look right and measure distance
void lookRight() {
    servo.attach(A2);  
    servo.write(0);   
    delay(500);
    distanceRight = getDistance(); 
    centerServo(); 
}

void centerServo() {
    servo.write(90);  // Set the servo to the center (90 degrees)
    delay(500);        // Allow time for the servo to reach the position
    servo.detach();    // Detach the servo to free up the pin for other uses
}

void moveForward() {
    digitalWrite(MOTOR_A_IN1, HIGH);
    digitalWrite(MOTOR_A_IN2, LOW);
    digitalWrite(MOTOR_B_IN1, HIGH);
    digitalWrite(MOTOR_B_IN2, LOW);
    analogWrite(ENABLE_MOTOR_A, motorSpeed); // Full speed
    analogWrite(ENABLE_MOTOR_B, motorSpeed); // Full speed
}

void moveBackward() {
    digitalWrite(MOTOR_A_IN1, LOW);
    digitalWrite(MOTOR_A_IN2, HIGH);
    digitalWrite(MOTOR_B_IN1, LOW);
    digitalWrite(MOTOR_B_IN2, HIGH);
    analogWrite(ENABLE_MOTOR_A, motorSpeed); // Full speed
    analogWrite(ENABLE_MOTOR_B, motorSpeed); // Full speed
}

void moveRight() {
  digitalWrite(MOTOR_A_IN1, LOW);
  digitalWrite(MOTOR_A_IN2, HIGH);
  digitalWrite(MOTOR_B_IN1, HIGH);
  digitalWrite(MOTOR_B_IN2, LOW);
  analogWrite(ENABLE_MOTOR_A, motorSpeed); // Full speed
  analogWrite(ENABLE_MOTOR_B, motorSpeed); // Full speed
}

void moveLeft() {
  digitalWrite(MOTOR_A_IN1, HIGH);
  digitalWrite(MOTOR_A_IN2, LOW);
  digitalWrite(MOTOR_B_IN1, LOW);
  digitalWrite(MOTOR_B_IN2, HIGH);
  analogWrite(ENABLE_MOTOR_A, motorSpeed); // Full speed
  analogWrite(ENABLE_MOTOR_B, motorSpeed); // Full speed
}

void turnLeft() {
    moveRight();
    delay(800);
    stopMotors();
}

void turnRight() {
    moveLeft();
    delay(800);
    stopMotors();
}

void stopMotors() {
    digitalWrite(MOTOR_A_IN1, LOW);
    digitalWrite(MOTOR_A_IN2, LOW);
    digitalWrite(MOTOR_B_IN1, LOW);
    digitalWrite(MOTOR_B_IN2, LOW);
    analogWrite(ENABLE_MOTOR_A, 0); // Full speed
    analogWrite(ENABLE_MOTOR_B, 0); // Full speed
}

// Function to play the horn sound using analog output
void playHorn() {
    Serial.println("HONK");
    analogWrite(BUZZER_PIN, 200); // Set analog value for a tone (PWM)
    delay(200);
}

// Function to stop the horn sound
void stopHorn() {
    analogWrite(BUZZER_PIN, 0); // Turn off the buzzer
}

void playAlarm() {
    // Play a firefighter alarm tone
    for (int i = 0; i < 5; i++) {
        analogWrite(BUZZER_PIN, 200); // Max volume
        delay(500);
        analogWrite(BUZZER_PIN, 0);   // Silence
        delay(500);
    }
}
